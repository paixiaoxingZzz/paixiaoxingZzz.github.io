<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>陌路のblog</title>
  
  <subtitle>陌路のblog</subtitle>
  <link href="https://paixiaoxingzzz.github.io/atom.xml" rel="self"/>
  
  <link href="https://paixiaoxingzzz.github.io/"/>
  <updated>2021-04-08T08:57:23.140Z</updated>
  <id>https://paixiaoxingzzz.github.io/</id>
  
  <author>
    <name>paixiaoxingZzz</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>什么是设计模式</title>
    <link href="https://paixiaoxingzzz.github.io/2021/04/08/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://paixiaoxingzzz.github.io/2021/04/08/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-04-08T08:57:23.140Z</published>
    <updated>2021-04-08T08:57:23.140Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-设计模式"><a href="#1-设计模式" class="headerlink" title="1.设计模式"></a>1.设计模式</h2><p>1.什么是设计模式？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结。</span><br></pre></td></tr></table></figure><p>2.使用设计模式的目的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">为了代码可重用性、让代码更容易被他人理解、保证代码可靠性。设计模式使代码编写真正工</span><br><span class="line">程化；设计模式是软件工程的基石脉络，如同大厦的结构一样。</span><br></pre></td></tr></table></figure><p>3.设计模式的分类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.创建型模式：</span><br><span class="line">    单例模式、工厂模式、抽象工厂模式、建造者模式、原型模式</span><br><span class="line">2.结构型模式：</span><br><span class="line">    适配器模式、桥接模式、装饰模式、组合模式。外观模式、享元模式、代理模式</span><br><span class="line">3.行为型模式</span><br><span class="line">    模版方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器</span><br><span class="line">    模式、状态模式、策略模式、职责链模式、访问者模式。</span><br></pre></td></tr></table></figure><h2 id="2-单例模式"><a href="#2-单例模式" class="headerlink" title="2.单例模式"></a>2.单例模式</h2><p>1.核心作用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">保证一个类只有一个实例，并且提供了一个访问该实例的全局访问点</span><br></pre></td></tr></table></figure><p>2.常见的应用场景</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1.Windows的Task Manager（任务管理器）就是很典型的单例模式</span><br><span class="line">2.windows的RecycleBin（回收站）也是典型的单例应用。在整个系统运行过程中，回收站一直</span><br><span class="line">  维护着仅有的一个实例。</span><br><span class="line">3.项目中，读取配置文件的类，一般也只有一个对象。没有必要每次使用配置文件数据，每次</span><br><span class="line">  new一个对象去读取。</span><br><span class="line">4.网站的计数器，一般也是采用单例模式实现，否则难以同步。</span><br><span class="line">5.应用程序的日志应用，一般都使用单例模式实现，这一般是由于共享的日志文件一直处于</span><br><span class="line">  打开状态，因为只能有一个实例去操作，否则内容不好追加。</span><br><span class="line">6.数据库连接池的设计一般也是采用单例模式，因为数据库连接是一种数据库资源。</span><br><span class="line">7.操作系统的文件系统，也是大的单例模式实现的具体例子，一个操作系统只能有一个文件</span><br><span class="line">  系统。</span><br><span class="line">8.Application 也是单例的典型应用（Servlet编程中会涉及到）</span><br><span class="line">9.在Spring中，每个Bean默认就是单例的，这样做的优点是Spring容器可以管理</span><br><span class="line">10.在servlet编程中，每个Servlet也是单例</span><br><span class="line">11.在spring MVC框架&#x2F;struts1框架中，控制器对象也是单例</span><br></pre></td></tr></table></figure><ol start="3"><li> 单例模式的优点<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.由于单例模式只生成一个实例，减少了系统性能开销，当一个对象的产生需要比较多的资</span><br><span class="line">  源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象</span><br><span class="line">  ，然后永久驻留内存的方式来解决</span><br><span class="line">2.单例模式可以在系统设置全局的访问点，优化环共享资源访问，例如可以设计一个单例类</span><br><span class="line">  ，负责所有数据表的映射处理</span><br></pre></td></tr></table></figure></li><li>常见的五种单例模式实现方式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">主要：</span><br><span class="line">    • 饿汉式（线程安全，调用效率高。 但是，不能延时加载。）</span><br><span class="line">    • 懒汉式（线程安全，调用效率不高。 但是，可以延时加载。）</span><br><span class="line">其他：</span><br><span class="line">    • 双重检测锁式（由于JVM底层内部模型原因，偶尔会出问题。不建议使用）</span><br><span class="line">    • 静态内部类式 (线程安全，调用效率高。但是，可以延时加载)</span><br><span class="line">    • 枚举单例 (线程安全，调用效率高，不能延时加载)</span><br></pre></td></tr></table></figure><h2 id="3-饿汉式实现（单例对象立即加载）"><a href="#3-饿汉式实现（单例对象立即加载）" class="headerlink" title="3.饿汉式实现（单例对象立即加载）"></a>3.饿汉式实现（单例对象立即加载）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;饿汉式代码的编写</span><br><span class="line">public class SingletonDemo1 &#123;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;类初始化时，立即加载这个对象（没有延时加载的优势）。加载类时，天然的是线程安全的！</span><br><span class="line">private static SingletonDemo1 instance &#x3D; new SingletonDemo1();  </span><br><span class="line"></span><br><span class="line">private SingletonDemo1()&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;方法没有同步，调用效率高！</span><br><span class="line">public static SingletonDemo1  getInstance()&#123;</span><br><span class="line">return instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;测试饿汉式</span><br><span class="line">public class Client &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SingletonDemo1 s1 &#x3D; SingletonDemo1.getInstance();</span><br><span class="line">SingletonDemo2 s2 &#x3D; SingletonDemo1.getInstance();</span><br><span class="line"></span><br><span class="line">System.out.println(s1);</span><br><span class="line">System.out.println(s2);</span><br><span class="line"></span><br><span class="line">System.out.println(SingletonDemo5.INSTANCE&#x3D;&#x3D;SingletonDemo5.INSTANCE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">饿汉式单例模式代码中，static变量会在类装载时初始化，此时也不会涉及多个线程对象访</span><br><span class="line">问该对象的问题。虚拟机保证只会装载一次该类，肯定不会发生并发访问的问题。因此，可</span><br><span class="line">以省略synchronized关键字。</span><br><span class="line"></span><br><span class="line">注意：如果只是加载本类，而不是要调用getInstance()，甚至永远没有调用，则会造成资</span><br><span class="line">源浪费！</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-懒汉式实现（单例对象延迟加载）"><a href="#4-懒汉式实现（单例对象延迟加载）" class="headerlink" title="4.懒汉式实现（单例对象延迟加载）"></a>4.懒汉式实现（单例对象延迟加载）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;懒汉式代码的编写</span><br><span class="line">public class SingletonDemo2 &#123;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;类初始化时，不初始化这个对象（延时加载，真正用的时候再创建）。</span><br><span class="line">private static SingletonDemo2 instance;  </span><br><span class="line"></span><br><span class="line">private SingletonDemo2()&#123; &#x2F;&#x2F;私有化构造器</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;方法同步，调用效率低！</span><br><span class="line">public static  synchronized SingletonDemo2  getInstance()&#123;</span><br><span class="line">if(instance&#x3D;&#x3D;null)&#123;</span><br><span class="line">instance &#x3D; new SingletonDemo2();</span><br><span class="line">&#125;</span><br><span class="line">return instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;测试饿汉式</span><br><span class="line">public class Client &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SingletonDemo1 s1 &#x3D; SingletonDemo2.getInstance();</span><br><span class="line">SingletonDemo2 s2 &#x3D; SingletonDemo2.getInstance();</span><br><span class="line"></span><br><span class="line">System.out.println(s1);</span><br><span class="line">System.out.println(s2);</span><br><span class="line"></span><br><span class="line">System.out.println(SingletonDemo5.INSTANCE&#x3D;&#x3D;SingletonDemo5.INSTANCE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">– lazy load! 延迟加载， 懒加载！ 真正用的时候才加载！</span><br><span class="line">资源利用率高了。但是，每次调用getInstance()方法都要同步，并发效率较低。</span><br></pre></td></tr></table></figure><h2 id="5-双重检测锁实现"><a href="#5-双重检测锁实现" class="headerlink" title="5.双重检测锁实现"></a>5.双重检测锁实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;双重检测锁代码的编写</span><br><span class="line">public class SingletonDemo3 &#123; </span><br><span class="line"></span><br><span class="line">  private static SingletonDemo3 instance &#x3D; null; </span><br><span class="line"></span><br><span class="line">  public static SingletonDemo3 getInstance() &#123; </span><br><span class="line">    if (instance &#x3D;&#x3D; null) &#123; </span><br><span class="line">      SingletonDemo3 sc; </span><br><span class="line">      synchronized (SingletonDemo3.class) &#123; </span><br><span class="line">        sc &#x3D; instance; </span><br><span class="line">        if (sc &#x3D;&#x3D; null) &#123; </span><br><span class="line">          synchronized (SingletonDemo3.class) &#123; </span><br><span class="line">            if(sc &#x3D;&#x3D; null) &#123; </span><br><span class="line">              sc &#x3D; new SingletonDemo3(); </span><br><span class="line">            &#125; </span><br><span class="line">          &#125; </span><br><span class="line">          instance &#x3D; sc; </span><br><span class="line">        &#125; </span><br><span class="line">      &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    return instance; </span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">  private SingletonDemo3() &#123; </span><br><span class="line"></span><br><span class="line">  &#125; </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;测试双重检测锁</span><br><span class="line">public class Client &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SingletonDemo1 s1 &#x3D; SingletonDemo3.getInstance();</span><br><span class="line">SingletonDemo2 s2 &#x3D; SingletonDemo3.getInstance();</span><br><span class="line"></span><br><span class="line">System.out.println(s1);</span><br><span class="line">System.out.println(s2);</span><br><span class="line"></span><br><span class="line">System.out.println(SingletonDemo5.INSTANCE&#x3D;&#x3D;SingletonDemo5.INSTANCE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">这个模式将同步内容下方到if内部，提高了执行的效率不必每次获取对象时都进行同步，只</span><br><span class="line">有第一次才同步创建了以后就没必要了。</span><br><span class="line">注意：由于编译器优化原因和JVM底层内部模型原因，偶尔会出问题。不建议使用。</span><br></pre></td></tr></table></figure><h2 id="6-静态内部类实现方式-也是一种懒加载方式"><a href="#6-静态内部类实现方式-也是一种懒加载方式" class="headerlink" title="6.静态内部类实现方式(也是一种懒加载方式)"></a>6.静态内部类实现方式(也是一种懒加载方式)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;静态内部类代码的编写</span><br><span class="line">public class SingletonDemo4 &#123;</span><br><span class="line"></span><br><span class="line">private static class SingletonClassInstance &#123;</span><br><span class="line">private static final SingletonDemo4 instance &#x3D; new SingletonDemo4();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private SingletonDemo4()&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;方法没有同步，调用效率高！</span><br><span class="line">public static SingletonDemo4  getInstance()&#123;</span><br><span class="line">return SingletonClassInstance.instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;测试静态内部类</span><br><span class="line">public class Client &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SingletonDemo1 s1 &#x3D; SingletonDemo4.getInstance();</span><br><span class="line">SingletonDemo2 s2 &#x3D; SingletonDemo4.getInstance();</span><br><span class="line"></span><br><span class="line">System.out.println(s1);</span><br><span class="line">System.out.println(s2);</span><br><span class="line"></span><br><span class="line">System.out.println(SingletonDemo5.INSTANCE&#x3D;&#x3D;SingletonDemo5.INSTANCE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">1.外部类没有static属性，则不会像饿汉式那样立即加载对象。</span><br><span class="line">2.只有真正调用getInstance(),才会加载静态内部类。加载类时是线程安全的。</span><br><span class="line">  instance是static final、类型，保证了内存中只有这样一个实例存在，而且只能被赋值一</span><br><span class="line">  次，从而保证了线程安全性.</span><br><span class="line">3.兼备了并发高效调用和延迟加载的优势！</span><br></pre></td></tr></table></figure><h2 id="7-使用枚举实现单例模式"><a href="#7-使用枚举实现单例模式" class="headerlink" title="7.使用枚举实现单例模式"></a>7.使用枚举实现单例模式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;枚举实现代码的编写</span><br><span class="line">public enum SingletonDemo5 &#123;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;这个枚举元素，本身就是单例对象！</span><br><span class="line">INSTANCE;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;添加自己需要的操作！</span><br><span class="line">public void singletonOperation()&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;测试枚举</span><br><span class="line">public class Client &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SingletonDemo1 s1 &#x3D; SingletonDemo5.INSTANCE;</span><br><span class="line">SingletonDemo2 s2 &#x3D; SingletonDemo5.INSTANCE;</span><br><span class="line"></span><br><span class="line">System.out.println(s1);</span><br><span class="line">System.out.println(s2);</span><br><span class="line"></span><br><span class="line">System.out.println(SingletonDemo5.INSTANCE&#x3D;&#x3D;SingletonDemo5.INSTANCE);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">优点：</span><br><span class="line">    – 实现简单</span><br><span class="line">    – 枚举本身就是单例模式。由JVM从根本上提供保障！避免通过反射和反序列化的漏洞！</span><br><span class="line">缺点：</span><br><span class="line">    – 无延迟加载</span><br></pre></td></tr></table></figure><h2 id="8-通过反射与反序列化破解单例模式"><a href="#8-通过反射与反序列化破解单例模式" class="headerlink" title="8.通过反射与反序列化破解单例模式"></a>8.通过反射与反序列化破解单例模式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">反射可以破解上面几种(不包含枚举式)实现方式！（可以在构造方法中手动抛出异常控制）</span><br><span class="line">– 反序列化可以破解上面几种((不包含枚举式))实现方式！</span><br><span class="line">    • 可以通过定义readResolve()防止获得不同对象。</span><br><span class="line">    – 反序列化时，如果对象所在类定义了readResolve()，（实际是一种回调），</span><br><span class="line">      定义返回哪个对象。</span><br><span class="line">    </span><br><span class="line">&#x2F;&#x2F;测试反射和反序列化破解单例模式  </span><br><span class="line">public class Client2 &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">SingletonDemo6 s1 &#x3D; SingletonDemo6.getInstance();</span><br><span class="line">SingletonDemo6 s2 &#x3D; SingletonDemo6.getInstance();</span><br><span class="line"></span><br><span class="line">System.out.println(s1);</span><br><span class="line">System.out.println(s2);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;通过反射的方式直接调用私有构造器</span><br><span class="line">&#x2F;&#x2F;Class&lt;SingletonDemo6&gt; clazz &#x3D; (Class&lt;SingletonDemo6&gt;)  </span><br><span class="line">&#x2F;&#x2F;      Class.forName(&quot;com.bjsxt.singleton.SingletonDemo6&quot;);</span><br><span class="line">&#x2F;&#x2F;Constructor&lt;SingletonDemo6&gt; c &#x3D; clazz.getDeclaredConstructor(null);</span><br><span class="line">&#x2F;&#x2F;c.setAccessible(true);</span><br><span class="line">&#x2F;&#x2F;SingletonDemo6  s3 &#x3D; c.newInstance();</span><br><span class="line">&#x2F;&#x2F;SingletonDemo6  s4 &#x3D; c.newInstance();</span><br><span class="line">&#x2F;&#x2F;System.out.println(s3);</span><br><span class="line">&#x2F;&#x2F;System.out.println(s4);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;通过反序列化的方式构造多个对象 </span><br><span class="line">FileOutputStream fos &#x3D; new FileOutputStream(&quot;d:&#x2F;a.txt&quot;);</span><br><span class="line">ObjectOutputStream oos &#x3D; new ObjectOutputStream(fos);</span><br><span class="line">oos.writeObject(s1);</span><br><span class="line">oos.close();</span><br><span class="line">fos.close();</span><br><span class="line"></span><br><span class="line">ObjectInputStream ois &#x3D; new ObjectInputStream(new FileInputStream(&quot;d:&#x2F;a.txt&quot;));</span><br><span class="line">SingletonDemo6 s3 &#x3D;  (SingletonDemo6) ois.readObject();</span><br><span class="line">System.out.println(s3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;如何防止反射和反序列化漏洞</span><br><span class="line">public class SingletonDemo6 implements Serializable &#123;</span><br><span class="line">&#x2F;&#x2F;类初始化时，不初始化这个对象（延时加载，真正用的时候再创建）。</span><br><span class="line">private static SingletonDemo6 instance;  </span><br><span class="line"></span><br><span class="line">private SingletonDemo6()&#123; &#x2F;&#x2F;私有化构造器</span><br><span class="line">if(instance!&#x3D;null)&#123;</span><br><span class="line">throw new RuntimeException();</span><br><span class="line">&#x2F;&#x2F;通过手动抛出异常，避免通过反射创建多个单例对象！</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;方法同步，调用效率低！</span><br><span class="line">public static  synchronized SingletonDemo6  getInstance()&#123;</span><br><span class="line">if(instance&#x3D;&#x3D;null)&#123;</span><br><span class="line">instance &#x3D; new SingletonDemo6();</span><br><span class="line">&#125;</span><br><span class="line">return instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;反序列化时，如果定义了readResolve()则直接返回此方法指定的对象。而不需要单</span><br><span class="line">独再创建新对象！</span><br><span class="line">private Object readResolve() throws ObjectStreamException &#123;</span><br><span class="line">return instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-常见的五种单例模式在多线程环境下的效率测试"><a href="#9-常见的五种单例模式在多线程环境下的效率测试" class="headerlink" title="9.常见的五种单例模式在多线程环境下的效率测试"></a>9.常见的五种单例模式在多线程环境下的效率测试</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">只要关注相对值即可。在不同的环境下不同的程序测得值完全不一样</span><br><span class="line"></span><br><span class="line">    饿汉式          22ms</span><br><span class="line">    懒汉式          636ms</span><br><span class="line">    静态内部类式    28ms</span><br><span class="line">    枚举式          32ms</span><br><span class="line">    双重检查锁式    65ms</span><br><span class="line">CountDownLatch</span><br><span class="line">同步辅助类，在完成一组正在其他线程中执行的操作之前，它允许一个或多个线程一直等待。</span><br><span class="line">    • countDown() 当前线程调此方法，则计数减一(建议放在 finally里执行)</span><br><span class="line">    • await()， 调用此方法会一直阻塞当前线程，直到计时器的值为0</span><br><span class="line">    </span><br><span class="line">&#x2F;&#x2F;测试多线程环境下五种创建单例模式的效率</span><br><span class="line">public class Client3 &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">long start &#x3D; System.currentTimeMillis();</span><br><span class="line">int threadNum &#x3D; 10;</span><br><span class="line">final CountDownLatch  countDownLatch &#x3D; new CountDownLatch(threadNum);</span><br><span class="line"></span><br><span class="line">for(int i&#x3D;0;i&lt;threadNum;i++)&#123;</span><br><span class="line">new Thread(new Runnable() &#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line"></span><br><span class="line">for(int i&#x3D;0;i&lt;1000000;i++)&#123;</span><br><span class="line">&#x2F;&#x2F;Object o &#x3D; SingletonDemo4.getInstance();</span><br><span class="line">Object o &#x3D; SingletonDemo5.INSTANCE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">countDownLatch.countDown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">countDownLatch.await();</span><br><span class="line">&#x2F;&#x2F;main线程阻塞，直到计数器变为0，才会继续往下执行！</span><br><span class="line"></span><br><span class="line">long end &#x3D; System.currentTimeMillis();</span><br><span class="line">System.out.println(&quot;总耗时：&quot;+(end-start));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-设计模式&quot;&gt;&lt;a href=&quot;#1-设计模式&quot; class=&quot;headerlink&quot; title=&quot;1.设计模式&quot;&gt;&lt;/a&gt;1.设计模式&lt;/h2&gt;&lt;p&gt;1.什么是设计模式？&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://paixiaoxingzzz.github.io/2020/11/12/hello-world/"/>
    <id>https://paixiaoxingzzz.github.io/2020/11/12/hello-world/</id>
    <published>2020-11-12T02:47:44.059Z</published>
    <updated>2020-11-12T02:47:44.059Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
